{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Desktop/uni/exesite/src/Wapp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Wapp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Wapp() {\n  _s();\n  const apiKey = \"7996effa26e916ad74de3bb79b2f14d7\"; // Replace with your own API key\n  const [weatherData, setWeatherData] = useState([]);\n  const [error, setError] = useState(null);\n  const cities = [\"Milano\", \"Roma\", \"Bologna\", \"Palermo\", \"Napoli\", \"Torino\", \"Firenze\"];\n  function clearWeatherCards() {\n    setWeatherData([]); // Clear the weather data state\n    setError(null); // Clear any previous errors\n  }\n  async function getWeatherForAllCities(apiKey) {\n    clearWeatherCards();\n    const promises = cities.map(city => fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=it&units=metric&appid=${apiKey}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }));\n    try {\n      const results = await Promise.all(promises);\n      setWeatherData(results);\n    } catch (error) {\n      setError('Failed to fetch weather data');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid animated-gradient py-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title text-center mb-5\",\n      children: \"IWWA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title text-center mb-5\",\n      children: \"Italian Worst Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6 offset-md-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: \"Display Weather for All Cities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => getWeatherForAllCities(apiKey),\n          className: \"btn btn-primary\",\n          children: \"Display All Cities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"weather-cards\",\n        className: \"col-md-12 d-flex justify-content-center flex-wrap\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 31\n        }, this), weatherData.length > 0 && weatherData.map((cityData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card m-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-title\",\n            children: cityData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [\"Temperature: \", cityData.main.temp, \" \\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [\"Weather: \", cityData.weather[0].description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [\"Humidity: \", cityData.main.humidity, \" %\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(Wapp, \"/x4PvH44mggrTwD/wITJDWm+WgQ=\");\n_c = Wapp;\nexport default Wapp;\nvar _c;\n$RefreshReg$(_c, \"Wapp\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Wapp","_s","apiKey","weatherData","setWeatherData","error","setError","cities","clearWeatherCards","getWeatherForAllCities","promises","map","city","fetch","then","response","ok","Error","json","results","Promise","all","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","length","cityData","index","name","main","temp","weather","description","humidity","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Desktop/uni/exesite/src/Wapp.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Wapp.css';\n\nfunction Wapp() {\n    const apiKey = \"7996effa26e916ad74de3bb79b2f14d7\"; // Replace with your own API key\n    const [weatherData, setWeatherData] = useState([]);\n    const [error, setError] = useState(null);\n    \n    const cities = [\"Milano\", \"Roma\", \"Bologna\", \"Palermo\", \"Napoli\", \"Torino\", \"Firenze\"];\n\n    function clearWeatherCards() {\n        setWeatherData([]); // Clear the weather data state\n        setError(null); // Clear any previous errors\n    }\n\n    async function getWeatherForAllCities(apiKey) {\n        clearWeatherCards();\n        const promises = cities.map(city => \n            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=it&units=metric&appid=${apiKey}`)\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error('Network response was not ok');\n                    }\n                    return response.json();\n                })\n        );\n\n        try {\n            const results = await Promise.all(promises);\n            setWeatherData(results);\n        } catch (error) {\n            setError('Failed to fetch weather data');\n        }\n    }\n\n    return (\n        <div className=\"container-fluid animated-gradient py-5\">\n            <h1 className=\"title text-center mb-5\">IWWA</h1>\n            <h2 className=\"title text-center mb-5\">Italian Worst Weather App</h2>\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3\">\n                    <h3 className=\"title\">Display Weather for All Cities</h3>\n                    <button onClick={() => getWeatherForAllCities(apiKey)} className=\"btn btn-primary\">Display All Cities</button>\n                </div>\n            </div>\n            <div className=\"row mt-5\">\n                <div id=\"weather-cards\" className=\"col-md-12 d-flex justify-content-center flex-wrap\">\n                    {error && <p>{error}</p>}\n                    {weatherData.length > 0 && weatherData.map((cityData, index) => (\n                        <div className=\"card m-2\" key={index}>\n                            <h5 className=\"card-title\">{cityData.name}</h5>\n                            <p className=\"card-text\">Temperature: {cityData.main.temp} Â°C</p>\n                            <p className=\"card-text\">Weather: {cityData.weather[0].description}</p>\n                            <p className=\"card-text\">Humidity: {cityData.main.humidity} %</p>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Wapp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
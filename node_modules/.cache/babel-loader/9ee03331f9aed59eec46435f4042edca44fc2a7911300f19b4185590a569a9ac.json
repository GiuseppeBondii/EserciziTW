{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Desktop/uni/exesite/src/Wapp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Wapp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Wapp() {\n  _s();\n  const apiKey = \"7996effa26e916ad74de3bb79b2f14d7\"; // Replace with your own API key\n  const [weatherData, setWeatherData] = useState([]);\n  const [error, setError] = useState(null);\n  const cities = [\"Milano\", \"Roma\", \"Bologna\", \"Palermo\", \"Napoli\", \"Torino\", \"Firenze\"];\n  function clearWeatherCards() {\n    setWeatherData([]); // Clear the weather data state\n    setError(null); // Clear any previous errors\n  }\n  async function getWeather(selectedCity) {\n    clearWeatherCards();\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${selectedCity}&lang=it&units=metric&appid=${apiKey}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setWeatherData([data]); // Update the weather data state for a single city\n    } catch (error) {\n      setError('Failed to fetch weather data');\n    }\n  }\n  async function getWeatherForAllCities() {\n    clearWeatherCards();\n    try {\n      const promises = cities.map(city => fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=it&units=metric&appid=${apiKey}`));\n      const results = await Promise.all(promises);\n      const data = await Promise.all(results.map(result => result.json()));\n      setWeatherData(data); // Update the weather data state with all cities' data\n    } catch (error) {\n      setError('Failed to fetch weather data');\n    }\n  }\n  async function getWeatherForAllCitiesSequentially() {\n    clearWeatherCards();\n    const data = [];\n    try {\n      for (const city of cities) {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=it&units=metric&appid=${apiKey}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const cityData = await response.json();\n        data.push(cityData);\n      }\n      setWeatherData(data); // Update the weather data state with sequential data\n    } catch (error) {\n      setError('Failed to fetch weather data');\n    }\n  }\n  useEffect(() => {\n    const form = document.getElementById(\"city-form\");\n    form.addEventListener(\"submit\", event => {\n      event.preventDefault(); // Prevents form from refreshing page\n      const selectedCity = document.getElementById(\"city-select\").value;\n      getWeather(selectedCity);\n    });\n    const allCitiesSyncButton = document.getElementById(\"all-cities-sync\");\n    allCitiesSyncButton.addEventListener(\"click\", getWeatherForAllCities);\n    const allCitiesButton = document.getElementById(\"all-cities\");\n    allCitiesButton.addEventListener(\"click\", getWeatherForAllCitiesSequentially);\n\n    // Clean up event listeners when component unmounts\n    return () => {\n      form.removeEventListener(\"submit\", () => {});\n      allCitiesSyncButton.removeEventListener(\"click\", () => {});\n      allCitiesButton.removeEventListener(\"click\", () => {});\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid animated-gradient py-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title text-center mb-5\",\n      children: \"IWWA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title text-center mb-5\",\n      children: \"Italian Worst Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6 offset-md-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: \"Display one city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"city-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"city-select\",\n              className: \"form-select\",\n              children: cities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: city,\n                children: city\n              }, city, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: \"display-button\",\n            className: \"btn btn-primary\",\n            children: \"Display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6 offset-md-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title mt-3\",\n          children: \"Display Cities using Promise.all\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"all-cities-sync\",\n          className: \"btn btn-primary mt-1 mb-3\",\n          children: \"Display all #1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title mt-3\",\n          children: \"Display Cities one by one\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"all-cities\",\n          className: \"btn btn-primary mt-1 mb-3\",\n          children: \"Display all #2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"weather-cards\",\n        className: \"col-md-12 d-flex justify-content-center flex-wrap\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 31\n        }, this), weatherData.length > 0 && weatherData.map((cityData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card m-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-title\",\n            children: cityData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [\"Temperature: \", cityData.main.temp, \" \\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [\"Weather: \", cityData.weather[0].description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [\"Humidity: \", cityData.main.humidity, \" %\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n_s(Wapp, \"n43h4jdHp4GC78f8WJF2Q8CAZJg=\");\n_c = Wapp;\nexport default Wapp;\nvar _c;\n$RefreshReg$(_c, \"Wapp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Wapp","_s","apiKey","weatherData","setWeatherData","error","setError","cities","clearWeatherCards","getWeather","selectedCity","url","response","fetch","ok","Error","data","json","getWeatherForAllCities","promises","map","city","results","Promise","all","result","getWeatherForAllCitiesSequentially","cityData","push","form","document","getElementById","addEventListener","event","preventDefault","value","allCitiesSyncButton","allCitiesButton","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","length","index","name","main","temp","weather","description","humidity","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Desktop/uni/exesite/src/Wapp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Wapp.css';\n\nfunction Wapp() {\n    const apiKey = \"7996effa26e916ad74de3bb79b2f14d7\"; // Replace with your own API key\n    const [weatherData, setWeatherData] = useState([]);\n    const [error, setError] = useState(null);\n\n    const cities = [\"Milano\", \"Roma\", \"Bologna\", \"Palermo\", \"Napoli\", \"Torino\", \"Firenze\"];\n\n    function clearWeatherCards() {\n        setWeatherData([]); // Clear the weather data state\n        setError(null); // Clear any previous errors\n    }\n\n    async function getWeather(selectedCity) {\n        clearWeatherCards();\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${selectedCity}&lang=it&units=metric&appid=${apiKey}`;\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            const data = await response.json();\n            setWeatherData([data]); // Update the weather data state for a single city\n        } catch (error) {\n            setError('Failed to fetch weather data');\n        }\n    }\n\n    async function getWeatherForAllCities() {\n        clearWeatherCards();\n        try {\n            const promises = cities.map(city => fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=it&units=metric&appid=${apiKey}`));\n            const results = await Promise.all(promises);\n            const data = await Promise.all(results.map(result => result.json()));\n            setWeatherData(data); // Update the weather data state with all cities' data\n        } catch (error) {\n            setError('Failed to fetch weather data');\n        }\n    }\n\n    async function getWeatherForAllCitiesSequentially() {\n        clearWeatherCards();\n        const data = [];\n        try {\n            for (const city of cities) {\n                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=it&units=metric&appid=${apiKey}`);\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const cityData = await response.json();\n                data.push(cityData);\n            }\n            setWeatherData(data); // Update the weather data state with sequential data\n        } catch (error) {\n            setError('Failed to fetch weather data');\n        }\n    }\n\n    useEffect(() => {\n        const form = document.getElementById(\"city-form\");\n        form.addEventListener(\"submit\", event => {\n            event.preventDefault(); // Prevents form from refreshing page\n            const selectedCity = document.getElementById(\"city-select\").value;\n            getWeather(selectedCity);\n        });\n\n        const allCitiesSyncButton = document.getElementById(\"all-cities-sync\");\n        allCitiesSyncButton.addEventListener(\"click\", getWeatherForAllCities);\n\n        const allCitiesButton = document.getElementById(\"all-cities\");\n        allCitiesButton.addEventListener(\"click\", getWeatherForAllCitiesSequentially);\n\n        // Clean up event listeners when component unmounts\n        return () => {\n            form.removeEventListener(\"submit\", () => {});\n            allCitiesSyncButton.removeEventListener(\"click\", () => {});\n            allCitiesButton.removeEventListener(\"click\", () => {});\n        };\n    }, []);\n\n    return (\n        <div className=\"container-fluid animated-gradient py-5\">\n            <h1 className=\"title text-center mb-5\">IWWA</h1>\n            <h2 className=\"title text-center mb-5\">Italian Worst Weather App</h2>\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3\">\n                    <h3 className=\"title\">Display one city</h3>\n                    <form id=\"city-form\">\n                        <div className=\"form-group mb-3\">\n                            <select id=\"city-select\" className=\"form-select\">\n                                {cities.map(city => (\n                                    <option key={city} value={city}>{city}</option>\n                                ))}\n                            </select>\n                        </div>\n                        <button type=\"submit\" id=\"display-button\" className=\"btn btn-primary\">Display</button>\n                    </form>\n                </div>\n                <div className=\"col-md-6 offset-md-3\">\n                    <h3 className=\"title mt-3\">Display Cities using Promise.all</h3>\n                    <button id=\"all-cities-sync\" className=\"btn btn-primary mt-1 mb-3\">Display all #1</button>\n                    <h3 className=\"title mt-3\">Display Cities one by one</h3>\n                    <button id=\"all-cities\" className=\"btn btn-primary mt-1 mb-3\">Display all #2</button>\n                </div>\n            </div>\n            <div className=\"row mt-5\">\n                <div id=\"weather-cards\" className=\"col-md-12 d-flex justify-content-center flex-wrap\">\n                    {error && <p>{error}</p>}\n                    {weatherData.length > 0 && weatherData.map((cityData, index) => (\n                        <div className=\"card m-2\" key={index}>\n                            <h5 className=\"card-title\">{cityData.name}</h5>\n                            <p className=\"card-text\">Temperature: {cityData.main.temp} °C</p>\n                            <p className=\"card-text\">Weather: {cityData.weather[0].description}</p>\n                            <p className=\"card-text\">Humidity: {cityData.main.humidity} %</p>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Wapp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}